version: '3.8'

services:
  # 开发环境
  kimochi-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: kimochi-dev
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=file:./prisma/dev.db
      - JWT_SECRET=dev-secret-key-change-in-production
      - PORT=3000
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev
    networks:
      - kimochi-network
    profiles:
      - dev

  # 生产环境
  kimochi-prod:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kimochi-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=file:./prisma/prod.db
      - JWT_SECRET=${JWT_SECRET:-change-this-in-production}
      - PORT=3000
    volumes:
      - ./prisma:/app/prisma
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - kimochi-network
    profiles:
      - prod

  # 构建测试环境（用于CI/CD测试）
  kimochi-build-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: kimochi-build-test
    ports:
      - "3003:3000"
    environment:
      - NODE_ENV=test
      - DATABASE_URL=file:./prisma/test.db
      - JWT_SECRET=test-secret-key
      - PORT=3000
    volumes:
      - .:/app
      - /app/node_modules
    command: npm test
    networks:
      - kimochi-network
    profiles:
      - build-test

  # 预发布环境
  kimochi-staging:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kimochi-staging
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=staging
      - DATABASE_URL=file:./prisma/staging.db
      - JWT_SECRET=${JWT_SECRET:-staging-secret-key}
      - PORT=3000
    volumes:
      - ./prisma:/app/prisma
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - kimochi-network
    profiles:
      - staging

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: kimochi-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - kimochi-prod
    restart: unless-stopped
    networks:
      - kimochi-network
    profiles:
      - prod
      - staging

  # Redis 缓存 (可选)
  redis:
    image: redis:7-alpine
    container_name: kimochi-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - kimochi-network
    profiles:
      - prod
      - staging

  # 监控服务 (可选)
  prometheus:
    image: prom/prometheus:latest
    container_name: kimochi-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - kimochi-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: kimochi-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - kimochi-network
    profiles:
      - monitoring

networks:
  kimochi-network:
    driver: bridge

volumes:
  redis-data:
  prometheus-data:
  grafana-data:
